@page "/customers"
@attribute [StreamRendering]
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))
@inject HttpClient Http
@inject NavigationManager NavManager
@using RecruitmentTaskShared.Entities
@using Microsoft.AspNetCore.Components.QuickGrid

<PageTitle>Customers</PageTitle>

<div>
    <h1>Customers</h1>
</div>
<div class="grid">
    <QuickGrid ItemsProvider="provider" pagination="@pagination">
        <PropertyColumn Property="@(p => p.Id)" Sortable="true" IsDefaultSortColumn="true"/>
        <PropertyColumn Property="@(p => p.Name)" Sortable="true" />
        <PropertyColumn Property="@(p => p.Address)" Sortable="true" />
        <PropertyColumn Property="@(p => p.NIP)" Sortable="true" />
        <TemplateColumn Title="Actions">
            <button class="btn btn-primary" @onclick="@(() => EditCustomer(context.Id))">Edit</button>
            <button class="btn btn-danger" @onclick="@(() => DeleteCustomer(context.Id))">Delete</button>
        </TemplateColumn>
    </QuickGrid>

    <Paginator State="@pagination" />
    <div>
        <button class="btn btn-success" @onclick="AddCustomer">Add Customer</button>
    </div>
</div>
@code {
    List<Customer> customers = new List<Customer>();
    PaginationState pagination = new PaginationState { ItemsPerPage = 10 };
    GridItemsProvider<Customer> provider;
    protected override async Task OnInitializedAsync()
    {
        provider = async req => {
            var sortByAsc = req.SortByAscending;
            var sortByColumn = req.SortByColumn.Title;
            var result = await Http.GetFromJsonAsync<CustomerResponse>(
                $"api/customers?skip={req.StartIndex}&take={req.Count}&sortByAsc={sortByAsc}&column={sortByColumn}");

            return GridItemsProviderResult.From(items: result.Customers, totalItemCount: result.Count);
        };
    }

    void AddCustomer()
    {
        NavManager.NavigateTo("edit-customer");
    }

    void EditCustomer(int id)
    {
        NavManager.NavigateTo($"edit-customer/{id}");
    }

    async Task DeleteCustomer(int id)
    {
        await Http.DeleteAsync($"api/customers/{id}");
    }
}
