@page "/edit-customer"
@page "/edit-customer/{id:int}"
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))
@inject HttpClient Http
@inject NavigationManager NavManager
@using System.ComponentModel.DataAnnotations
@using System.Collections.Generic
@using System.Linq

<PageTitle>Edit Customer</PageTitle>

<h1>Edit Customer</h1>

@if(Id == null)
{
    <h3>Add Customer</h3>
}
else
{
    <h3>Edit Customer @ThisCustomer.Id</h3>
}

<EditForm Model="ThisCustomer" OnSubmit="HandleSubmit">
    <div>
        <label for="Name">Name</label>
        <InputText id="Name" @bind-Value="ThisCustomer.Name" class="form-control"></InputText>
    </div>
    <div>
        <label for="Address">Address</label>
        <InputText id="Address" @bind-Value="ThisCustomer.Address" class="form-control"></InputText>
    </div>
    <div>
        <label for="NIP">NIP</label>
        <InputNumber id="NIP" @bind-Value="ThisCustomer.NIP" class="form-control"></InputNumber>
    </div>
    <button type="submit" class="btn btn-primary" disabled="@(!IsValid())">Save</button>
</EditForm>

@code {
    [Parameter]
    public int? Id { get; set; }
    public Customer ThisCustomer { get; set; } = new Customer();
    protected override async Task OnParametersSetAsync()
    {
        if (Id != null)
        {
            var result = await Http.GetFromJsonAsync<Customer>($"api/customers/{Id}");
            if(result != null) ThisCustomer = result;
        }
    }

    async Task HandleSubmit() 
    {
        if (Id != null)
        {
            var result = await Http.PutAsJsonAsync($"api/customers/{Id}", ThisCustomer);
            await HandleHttpResponse(result);
        }
        else
        {
            var result = await Http.PostAsJsonAsync($"api/customers", ThisCustomer);
            await HandleHttpResponse(result);
        }

        NavManager.NavigateTo("/customers");
    }

    async Task HandleHttpResponse(HttpResponseMessage result)
    {
        if (result.Content.Headers.ContentType?.MediaType == "application/json")
        {
            var content = await result.Content.ReadAsStringAsync();
            ThisCustomer = JsonConvert.DeserializeObject<Customer>(content);
        }
        else
        {
            Console.WriteLine($"Error: Unexpected content type");
        }
    }

    bool IsValid()
    {
        var context = new ValidationContext(ThisCustomer, null, null);
        var results = new List<ValidationResult>();

        return Validator.TryValidateObject(ThisCustomer, context, results, true);
    }
}